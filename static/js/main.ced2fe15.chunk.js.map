{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","search","setSearch","loading","setLoading","error","setError","gifs","setGifs","className","type","placeholder","value","onChange","e","target","onClick","length","fetch","then","res","json","result","console","log","data","map","gif","images","fixed_height","url","catch","err","alert","src","alt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yKA6DeA,MAzDf,WACE,MAA2BC,mBAAS,IAApC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA6BF,oBAAS,GAAtC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAuBN,mBAAS,IAAhC,mBAAOO,EAAP,KAAYC,EAAZ,KAyBA,OACE,qCACE,qBAAKC,UAAU,SAAf,SACE,sBAAKA,UAAU,QAAf,UACA,uBAAOC,KAAK,OAAOC,YAAY,aAAaC,MAAOX,EAAQY,SAAU,SAACC,GAAD,OAAKZ,EAAUY,EAAEC,OAAOH,UAC7F,wBAAQI,QA5BE,WACdV,EAAS,IACTE,EAAQ,IAELP,EAAOgB,OAAS,EACjBC,MAZY,oGAYIjB,GAAQkB,MAAK,SAACC,GAE5B,OADAhB,GAAW,GACJgB,EAAIC,UACVF,MAAK,SAACG,GACPlB,GAAW,GACXmB,QAAQC,IAAIF,GACZd,EAAQc,EAAOG,KAAKC,KAAI,SAACC,GACvB,OAAOA,EAAIC,OAAOC,aAAaC,WAEhCC,OAAM,SAACC,GACR5B,GAAW,GACX6B,MAAM,2BAIR3B,EAAS,sBAQP,yBAGF,qBAAKG,UAAU,QAAf,SACA,4BAAIJ,MAGJ,qBAAKI,UAAU,SAAf,SACCN,EAAU,qBAAKM,UAAU,UAAf,SACP,qBAAKA,UAAU,aACR,qBAAKA,UAAU,OAAf,SACNF,EAAKmB,KAAI,SAAAC,GACR,OACA,qBAAKlB,UAAU,OAAf,SACI,qBAAKyB,IAAKP,EAAKQ,IAAI,0BCxCpBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.ced2fe15.chunk.js","sourcesContent":["import React,{useState} from 'react';\nimport './App.css';\n\nconst GIPHY_API = \"https://api.giphy.com/v1/gifs/search?api_key=m6kwV8ekcF41Y1OfPRNeIrxOf8S885NX&limit=5&offset=0&q=\"\nfunction App() {\n  const [search,setSearch] = useState('');\n  const [loading,setLoading] = useState(false);\n  const [error,setError] =useState(\"\")\n  const [gifs,setGifs] = useState([]);\n\n  const gifSearch=()=>{\n    setError(\"\")\n    setGifs([])\n\n    if(search.length > 0){\n      fetch(GIPHY_API+search).then((res)=>{\n        setLoading(true);\n        return res.json();\n      }).then((result)=>{\n        setLoading(false);\n        console.log(result)\n        setGifs(result.data.map((gif)=>{\n          return gif.images.fixed_height.url;\n        }))\n      }).catch((err)=>{\n        setLoading(false);\n        alert('something went wrong');\n      })\n    }\n    else{\n      setError('Enter search term')\n    }\n  }\n  return (\n    <>\n      <div className=\"header\">\n        <div className=\"group\">\n        <input type=\"text\" placeholder=\"Search Gif\" value={search} onChange={(e)=>setSearch(e.target.value)} />\n        <button onClick={gifSearch}>Search</button>\n        </div>\n      </div>\n      <div className=\"error\">\n      <p>{error}</p>\n      </div>\n      \n      <div className=\"result\">\n      {loading ? <div className=\"loading\">\n          <div className=\"loader\"></div>\n        </div> : <div className=\"list\">\n          {gifs.map(gif=>{\n            return (\n            <div className=\"item\">\n                <img src={gif} alt=\"gif here\" />\n            </div>)  \n          })}\n        </div> }\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}